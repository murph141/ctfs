#!/usr/bin/env python3

import hashlib, os, socket, string, time

DEBUG = False
LOCAL = False

HOST = 'knockknock.advent2021.overthewire.org' if not LOCAL else '127.0.0.1'
MIN_PORT = 25000
MAX_PORT = MIN_PORT + 1000
SONG_DIR = 'data/'

def connect(port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, port))
    return sock

def strip_values(line):
    charset = string.ascii_lowercase + " " + string.digits
    return "".join([c for c in line.lower() if c in charset])

def reverse_hash(line, expected):
    stripped = strip_values(line)
    for i in range(MIN_PORT, MAX_PORT + 1):
        h = hashlib.sha256(f'{stripped} -- {i}'.encode()).hexdigest()

        if h == expected:
            return i

    print(f'Unable to find hash: {expected}')
    return -1

def load_songs(dir_name):
    files = [f for f in os.listdir(dir_name) if os.path.isfile(os.path.join(dir_name, f))]

    out = {}
    for file in files:
        out[file] = [strip_values(x) for x in open(os.path.join(dir_name, file)).readlines()]

    entries = {}
    for k, v in out.items():
        entries[v[0]] = v
    return entries

def exploit():

    songs = load_songs(SONG_DIR)
    initial, current_song, current_line = True, None, 0

    while True:

        if initial:
            port = MIN_PORT
        else:
            port = reverse_hash(lyric, expected_hash)
            if port == -1:
                return False

        sock = connect(port)
        sock.recv(1024) # "Door <XYZ>"

        if initial:
            response = 'knock knock'
        else:
            response = current_song[current_line]

        response += '\n'
        sock.sendall(response.encode())

        response = sock.recv(1024)

        sock.close()

        values = response.decode().split('\n')

        # If needed, print a few debugging values

        if DEBUG:
            print('-'*25)
            print(response)
            print(values)
            print('-'*25)

        # Empty response, try again

        if response == b'':
            return False

        if initial:
            lyric = values[1]
            expected_hash = values[2]

            stripped_lyric = strip_values(lyric)
            try:
                current_song = songs[stripped_lyric]
            except KeyError:
                print(f'Error: song not found ({lyric})')
                return False

        else:
            if values[0] == 'Thanks! You have a really nice voice.':
                print('\nClose, but no flag')
                return False
            elif values[0][:12] == 'So beautiful':
                print(f'\nFlag: {values[0]}')
                return True

            lyric = current_song[current_line+1]
            expected_hash = values[0]

        print('.', end='', flush=True)
        if initial:
            initial = False
        else:
            current_line += 1

if __name__ == '__main__':
    while not exploit():
        pass
